import { Client as DiscordJsClient, Collection } from 'discord.js';
import { Command, ClientOptions, Message } from '..';
import { DefaultCommandOptions } from '../default-command-options';
/**
 * Extension of the Discord.js Client.
 *
 * Contains extra methods and properties for managing commands.
 *
 * @see https://discord.js.org/#/docs/main/master/class/Client
 */
export declare class Client extends DiscordJsClient {
    /**
     * Holds all of the registered commands.
     */
    commands: Collection<string, Command>;
    /**
     * The ClientOptions which were passed in the constructor.
     */
    readonly options: ClientOptions;
    /**
     * The command to run whenever an unknown command is ran.
     */
    unknownCommand?: Command;
    private readonly userService;
    constructor(options: ClientOptions);
    /**
     * Calls a callback when a message containing a command is processed.
     *
     * @param callback The function to call on the message
     */
    onCommand(callback: (msg: Message, cmd: Command, prefix: string) => void): void;
    /**
     * Calls a callback when a message starting with a prefix but not matching a command is sent.
     *
     * @param callback The function to call on the invalid command
     */
    onInvalidCommand(callback: (msg: Message) => void): void;
    /**
     * Register a command object
     *
     * @param command - The command object
     */
    registerCommand(command: Command): void;
    /**
     * Recursively finds all commands in a directory and registers them.
     *
     * @param filePath - The directory that contains commands.
     */
    registerCommandsIn(filePath: string | string[]): Promise<void>;
    /**
     * Registers the built-in commands.
     *
     * @param options Allows you to disable certain default commands.
     */
    registerDefaultCommands(options?: DefaultCommandOptions): void;
    /**
     * Helper method to fail when a duplicate command is registered.
     *
     * @param command - The comamnd that was attempted to be registered.
     * @param existingCommand - A command that was previously registered with the same name or alias.
     */
    private failDuplicate;
    /**
     * This ensures no commands/aliases with the same name are registered.
     *
     * @param command The command to check against all other commands.
     */
    private findDuplicateAndFail;
    /**
     * Converts the user arguments to an array with the same length as the expected arguments array.
     *
     * @param command - The command object.
     * @param args - The array of arguments provided by the user.
     */
    private getFormattedArgs;
    /**
     * Gets the prefix used by the user (in case an array was used)
     *
     * @param msg - The CommandMessage representing the user's message
     */
    private getPrefixFromMessage;
    /**
     * Handles exceptions generated from command execution.
     */
    private handleCommandError;
    /**
     * Helper method to check if message begins with a command prefix
     *
     * @param msg - The CommandMessage with the user's message
     */
    private messageStartsWithPrefix;
    /**
     * Handles when a user sends a message.
     *
     * @param msg - CommandMessage object
     */
    private onMessage;
    /**
     * Tries to get a command from the user's message and execute it
     *
     * @param msg - The CommandMessage representing the user's message
     */
    private parseMessageAsCommand;
    /**
     * Tries to get command from a single file.
     *
     * @param filePath - Absolute path of command file.
     */
    private resolveCommand;
    /**
     * Wrapper method to execute a command. Checks permission and handles exceptions.
     *
     * @param msg - The message object.
     * @param command - The command object to be ran.
     * @param args - Command args.
     */
    private runCommand;
    /**
     * Helper method to validate args and run command with args.
     *
     * @param msg - The message object.
     * @param command - The command object to be ran.
     * @param args - Command args.
     */
    private runCommandWithArgs;
    /**
     * Converts an array of arguments to an object key/value store with the designated type from the command args.
     *
     * @param command - The command object.
     * @param args - The formatted argument string array.
     */
    private mapArgsToObject;
    private resolveArgumentType;
    /**
     * Validates user arguments against required command arguments.
     *
     * @param msg - The message object.
     * @param command - The command object.
     * @param args - The arguments provided by the user.
     */
    private validateArgs;
    /**
     * Validates a value against a single type
     *
     * @param msg - The message object.
     * @param expected - The expected type.
     * @param value - The value from the user.
     */
    private validateType;
    /**
     * Tests a command's arguments for duplicate keys and for optional arguments before required ones.
     *
     * @param command The command to test the arguments of.
     */
    private validateUnregisteredCommandArguments;
    /**
     * Gets all files in directory, recursively.
     */
    private walk;
}
