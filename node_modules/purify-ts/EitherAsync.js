"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Either_1 = require("./Either");
const MaybeAsync_1 = require("./MaybeAsync");
const helpers = {
    liftEither(either) {
        if (either.isLeft()) {
            throw either.__value;
        }
        return Promise.resolve(either.__value);
    },
    fromPromise(promise) {
        return promise.then(helpers.liftEither);
    },
    throwE(error) {
        throw error;
    }
};
/** Constructs a EitherAsync object from a function that takes an object full of helpers that let you lift things into the EitherAsync context and returns a Promise */
exports.EitherAsync = (runPromise) => ({
    constructor: exports.EitherAsync,
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return Either_1.Right(yield runPromise(helpers));
            }
            catch (e) {
                return Either_1.Left(e);
            }
        });
    },
    map(f) {
        return exports.EitherAsync(helpers => runPromise(helpers).then(f));
    },
    chain(f) {
        return exports.EitherAsync((helpers) => __awaiter(this, void 0, void 0, function* () {
            const value = yield runPromise(helpers);
            return yield helpers.fromPromise(f(value).run());
        }));
    },
    toMaybeAsync() {
        return MaybeAsync_1.MaybeAsync(({ liftMaybe }) => __awaiter(this, void 0, void 0, function* () {
            const either = yield this.run();
            return liftMaybe(either.toMaybe());
        }));
    },
    'fantasy-land/map'(f) {
        return this.map(f);
    },
    'fantasy-land/chain'(f) {
        return this.chain(f);
    }
});
