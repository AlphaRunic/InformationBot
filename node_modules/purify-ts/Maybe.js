"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Either_1 = require("./Either");
exports.Maybe = {
    of(value) {
        return Just(value);
    },
    empty() {
        return exports.Nothing;
    },
    zero() {
        return exports.Nothing;
    },
    fromNullable(value) {
        return value == null ? exports.Nothing : Just(value);
    },
    fromFalsy(value) {
        return value ? Just(value) : exports.Nothing;
    },
    fromPredicate(pred, value) {
        switch (arguments.length) {
            case 1:
                return (value) => exports.Maybe.fromPredicate(pred, value);
            default:
                return pred(value) ? Just(value) : exports.Nothing;
        }
    },
    mapMaybe(f, list) {
        switch (arguments.length) {
            case 1:
                return (list) => exports.Maybe.mapMaybe(f, list);
            default:
                return exports.Maybe.catMaybes(list.map(f));
        }
    },
    catMaybes(list) {
        return list.filter(x => x.isJust()).map(x => x.__value);
    },
    encase(thunk) {
        try {
            return Just(thunk());
        }
        catch (_a) {
            return exports.Nothing;
        }
    },
    'fantasy-land/of'(value) {
        return this.of(value);
    },
    'fantasy-land/empty'() {
        return this.empty();
    },
    'fantasy-land/zero'() {
        return this.zero();
    }
};
/** Constructs a Just. Respents an optional value that exists. */
function Just(value) {
    return {
        constructor: exports.Maybe,
        __value: value,
        isJust: () => {
            return true;
        },
        isNothing: () => {
            return false;
        },
        inspect() {
            return `Just(${value})`;
        },
        toString() {
            return this.inspect();
        },
        toJSON() {
            return value;
        },
        equals(other) {
            return value === other.__value;
        },
        map(f) {
            return Just(f(value));
        },
        ap(maybeF) {
            return maybeF.isNothing() ? exports.Nothing : this.map(maybeF.__value);
        },
        alt(_) {
            return this;
        },
        chain(f) {
            return f(value);
        },
        chainNullable(f) {
            return exports.Maybe.fromNullable(f(value));
        },
        join() {
            return this.__value;
        },
        reduce(reducer, initialValue) {
            return reducer(initialValue, value);
        },
        extend(f) {
            return Just(f(this));
        },
        unsafeCoerce() {
            return value;
        },
        caseOf(patterns) {
            return '_' in patterns ? patterns._() : patterns.Just(value);
        },
        orDefault(_) {
            return value;
        },
        orDefaultLazy(_) {
            return value;
        },
        toList() {
            return [value];
        },
        mapOrDefault(f, _) {
            return f(value);
        },
        extract() {
            return value;
        },
        extractNullable() {
            return value;
        },
        toEither(_) {
            return Either_1.Right(value);
        },
        ifJust(effect) {
            return effect(value), this;
        },
        ifNothing(_) {
            return this;
        },
        filter(pred) {
            return pred(value) ? Just(value) : exports.Nothing;
        },
        'fantasy-land/equals'(other) {
            return this.equals(other);
        },
        'fantasy-land/map'(f) {
            return this.map(f);
        },
        'fantasy-land/ap'(maybeF) {
            return this.ap(maybeF);
        },
        'fantasy-land/alt'(other) {
            return this.alt(other);
        },
        'fantasy-land/chain'(f) {
            return this.chain(f);
        },
        'fantasy-land/reduce'(reducer, initialValue) {
            return this.reduce(reducer, initialValue);
        },
        'fantasy-land/extend'(f) {
            return this.extend(f);
        }
    };
}
exports.Just = Just;
/** Represents a missing value, you can think of it as a smart 'null'. */
exports.Nothing = {
    constructor: exports.Maybe,
    __value: null,
    isJust: () => {
        return false;
    },
    isNothing: () => {
        return true;
    },
    inspect() {
        return 'Nothing';
    },
    toString() {
        return this.inspect();
    },
    toJSON() {
        return this.__value;
    },
    equals(other) {
        return this.__value === other.__value;
    },
    map(_) {
        return exports.Nothing;
    },
    ap(_) {
        return exports.Nothing;
    },
    alt(other) {
        return other;
    },
    chain(_) {
        return exports.Nothing;
    },
    chainNullable(_) {
        return exports.Nothing;
    },
    join() {
        return exports.Nothing;
    },
    reduce(_, initialValue) {
        return initialValue;
    },
    extend(_) {
        return exports.Nothing;
    },
    unsafeCoerce() {
        throw new Error('Maybe got coerced to a null');
    },
    caseOf(patterns) {
        return '_' in patterns ? patterns._() : patterns.Nothing();
    },
    orDefault(defaultValue) {
        return defaultValue;
    },
    orDefaultLazy(getDefaultValue) {
        return getDefaultValue();
    },
    toList() {
        return [];
    },
    mapOrDefault(_, defaultValue) {
        return defaultValue;
    },
    extract() {
        return undefined;
    },
    extractNullable() {
        return null;
    },
    toEither(left) {
        return Either_1.Left(left);
    },
    ifJust(_) {
        return this;
    },
    ifNothing(effect) {
        return effect(), this;
    },
    filter(_) {
        return exports.Nothing;
    },
    'fantasy-land/equals'(other) {
        return this.equals(other);
    },
    'fantasy-land/map'(f) {
        return this.map(f);
    },
    'fantasy-land/ap'(maybeF) {
        return this.ap(maybeF);
    },
    'fantasy-land/alt'(other) {
        return this.alt(other);
    },
    'fantasy-land/chain'(f) {
        return this.chain(f);
    },
    'fantasy-land/reduce'(reducer, initialValue) {
        return this.reduce(reducer, initialValue);
    },
    'fantasy-land/extend'(f) {
        return this.extend(f);
    }
};
