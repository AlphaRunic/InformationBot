"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Maybe_1 = require("./Maybe");
exports.Either = {
    of(value) {
        return Right(value);
    },
    lefts(list) {
        return list.filter(x => x.isLeft()).map(x => x.__value);
    },
    rights(list) {
        return list.filter(x => x.isRight()).map(x => x.__value);
    },
    encase(throwsF) {
        try {
            return Right(throwsF());
        }
        catch (e) {
            return Left(e);
        }
    },
    'fantasy-land/of'(value) {
        return exports.Either.of(value);
    }
};
function Right(value) {
    return {
        constructor: exports.Either,
        __value: value,
        isLeft() {
            return false;
        },
        isRight() {
            return true;
        },
        toJSON() {
            return value;
        },
        inspect() {
            return `Right(${value})`;
        },
        toString() {
            return this.inspect();
        },
        bimap(_, g) {
            return Right(g(value));
        },
        map(f) {
            return Right(f(value));
        },
        mapLeft(_) {
            return this;
        },
        ap(other) {
            return other.isLeft() ? other : this.map(other.__value);
        },
        equals(other) {
            return other.isRight() ? value === other.__value : false;
        },
        chain(f) {
            return f(value);
        },
        join() {
            return value;
        },
        alt(_) {
            return this;
        },
        reduce(reducer, initialValue) {
            return reducer(initialValue, value);
        },
        extend(f) {
            return Right(f(this));
        },
        unsafeCoerce() {
            return value;
        },
        caseOf(patterns) {
            return '_' in patterns ? patterns._() : patterns.Right(value);
        },
        leftOrDefault(defaultValue) {
            return defaultValue;
        },
        orDefault(_) {
            return value;
        },
        orDefaultLazy(_) {
            return value;
        },
        leftOrDefaultLazy(getDefaultValue) {
            return getDefaultValue();
        },
        ifLeft(_) {
            return this;
        },
        ifRight(effect) {
            return effect(value), this;
        },
        toMaybe() {
            return Maybe_1.Just(value);
        },
        leftToMaybe() {
            return Maybe_1.Nothing;
        },
        either(_, ifRight) {
            return ifRight(value);
        },
        extract() {
            return value;
        },
        'fantasy-land/bimap'(f, g) {
            return this.bimap(f, g);
        },
        'fantasy-land/map'(f) {
            return this.map(f);
        },
        'fantasy-land/ap'(other) {
            return this.ap(other);
        },
        'fantasy-land/equals'(other) {
            return this.equals(other);
        },
        'fantasy-land/chain'(f) {
            return this.chain(f);
        },
        'fantasy-land/alt'(other) {
            return this.alt(other);
        },
        'fantasy-land/reduce'(reducer, initialValue) {
            return this.reduce(reducer, initialValue);
        },
        'fantasy-land/extend'(f) {
            return this.extend(f);
        }
    };
}
exports.Right = Right;
function Left(value) {
    return {
        constructor: exports.Either,
        __value: value,
        isLeft() {
            return true;
        },
        isRight() {
            return false;
        },
        toJSON() {
            return value;
        },
        inspect() {
            return `Left(${value})`;
        },
        toString() {
            return this.inspect();
        },
        bimap(f, _) {
            return Left(f(value));
        },
        map(_) {
            return this;
        },
        mapLeft(f) {
            return Left(f(value));
        },
        ap(other) {
            return other.isLeft() ? other : this;
        },
        equals(other) {
            return other.isLeft() ? other.__value === value : false;
        },
        chain(_) {
            return this;
        },
        join() {
            return this;
        },
        alt(other) {
            return other;
        },
        reduce(_, initialValue) {
            return initialValue;
        },
        extend(_) {
            return this;
        },
        unsafeCoerce() {
            throw new Error('Either got coerced to a Left');
        },
        caseOf(patterns) {
            return '_' in patterns ? patterns._() : patterns.Left(value);
        },
        leftOrDefault(_) {
            return value;
        },
        orDefault(defaultValue) {
            return defaultValue;
        },
        orDefaultLazy(getDefaultValue) {
            return getDefaultValue();
        },
        leftOrDefaultLazy(_) {
            return value;
        },
        ifLeft(effect) {
            return effect(value), this;
        },
        ifRight(_) {
            return this;
        },
        toMaybe() {
            return Maybe_1.Nothing;
        },
        leftToMaybe() {
            return Maybe_1.Just(value);
        },
        either(ifLeft, _) {
            return ifLeft(value);
        },
        extract() {
            return value;
        },
        'fantasy-land/bimap'(f, g) {
            return this.bimap(f, g);
        },
        'fantasy-land/map'(f) {
            return this.map(f);
        },
        'fantasy-land/ap'(other) {
            return this.ap(other);
        },
        'fantasy-land/equals'(other) {
            return this.equals(other);
        },
        'fantasy-land/chain'(f) {
            return this.chain(f);
        },
        'fantasy-land/alt'(other) {
            return this.alt(other);
        },
        'fantasy-land/reduce'(reducer, initialValue) {
            return this.reduce(reducer, initialValue);
        },
        'fantasy-land/extend'(f) {
            return this.extend(f);
        }
    };
}
exports.Left = Left;
