"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Maybe_1 = require("./Maybe");
const EitherAsync_1 = require("./EitherAsync");
const helpers = {
    liftMaybe(maybe) {
        if (maybe.isNothing()) {
            throw Maybe_1.Nothing;
        }
        return Promise.resolve(maybe.__value);
    },
    fromPromise(promise) {
        return promise.then(helpers.liftMaybe);
    }
};
/** Constructs a MaybeAsync object from a function that takes an object full of helpers that let you lift things into the MaybeAsync context and returns a Promise */
exports.MaybeAsync = (runPromise) => ({
    constructor: exports.MaybeAsync,
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return Maybe_1.Just(yield runPromise(helpers));
            }
            catch (_a) {
                return Maybe_1.Nothing;
            }
        });
    },
    map(f) {
        return exports.MaybeAsync(helpers => runPromise(helpers).then(f));
    },
    chain(f) {
        return exports.MaybeAsync((helpers) => __awaiter(this, void 0, void 0, function* () {
            const value = yield runPromise(helpers);
            return yield helpers.fromPromise(f(value).run());
        }));
    },
    toEitherAsync(error) {
        return EitherAsync_1.EitherAsync(({ liftEither }) => __awaiter(this, void 0, void 0, function* () {
            const maybe = yield this.run();
            return liftEither(maybe.toEither(error));
        }));
    },
    'fantasy-land/map'(f) {
        return this.map(f);
    },
    'fantasy-land/chain'(f) {
        return this.chain(f);
    }
});
