"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Tuple_1 = require("./Tuple");
const Maybe_1 = require("./Maybe");
/** Returns Just the first element of an array or Nothing if there is none. If you don't want to work with a Maybe but still keep type safety, check out `NonEmptyList` */
const head = (list) => list.length > 0 ? Maybe_1.Just(list[0]) : Maybe_1.Nothing;
/** Returns Just the last element of an array or Nothing if there is none */
const last = (list) => list.length > 0 ? Maybe_1.Just(list[list.length - 1]) : Maybe_1.Nothing;
/** Returns all elements of an array except the first */
const tail = (list) => list.length > 0 ? Maybe_1.Just(list.slice(1)) : Maybe_1.Nothing;
/** Returns all elements of an array except the last */
const init = (list) => list.length > 0 ? Maybe_1.Just(list.slice(0, -1)) : Maybe_1.Nothing;
/** Returns a tuple of an array's head and tail */
const uncons = (list) => list.length > 0 ? Maybe_1.Just(Tuple_1.Tuple(list[0], list.slice(1))) : Maybe_1.Nothing;
function at(index, list) {
    if (list === undefined) {
        return (list) => list[index] === undefined ? Maybe_1.Nothing : Maybe_1.Just(list[index]);
    }
    return list[index] === undefined ? Maybe_1.Nothing : Maybe_1.Just(list[index]);
}
exports.List = { init, uncons, at, head, last, tail };
